/* tslint:disable */
/* eslint-disable */
/**
 * FasterUI
 * A framework for building beautiful UIs. Pronto!
 *
 * The version of the OpenAPI document: 0.1.1
 * Contact: tomas.krejci@ampiato.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { AmpiatoLogo } from './AmpiatoLogo';
import {
    instanceOfAmpiatoLogo,
    AmpiatoLogoFromJSON,
    AmpiatoLogoFromJSONTyped,
    AmpiatoLogoToJSON,
} from './AmpiatoLogo';
import type { Button } from './Button';
import {
    instanceOfButton,
    ButtonFromJSON,
    ButtonFromJSONTyped,
    ButtonToJSON,
} from './Button';
import type { ButtonGroup } from './ButtonGroup';
import {
    instanceOfButtonGroup,
    ButtonGroupFromJSON,
    ButtonGroupFromJSONTyped,
    ButtonGroupToJSON,
} from './ButtonGroup';
import type { DatePicker } from './DatePicker';
import {
    instanceOfDatePicker,
    DatePickerFromJSON,
    DatePickerFromJSONTyped,
    DatePickerToJSON,
} from './DatePicker';
import type { FlexBox } from './FlexBox';
import {
    instanceOfFlexBox,
    FlexBoxFromJSON,
    FlexBoxFromJSONTyped,
    FlexBoxToJSON,
} from './FlexBox';
import type { Grid } from './Grid';
import {
    instanceOfGrid,
    GridFromJSON,
    GridFromJSONTyped,
    GridToJSON,
} from './Grid';
import type { Icon } from './Icon';
import {
    instanceOfIcon,
    IconFromJSON,
    IconFromJSONTyped,
    IconToJSON,
} from './Icon';
import type { Markdown } from './Markdown';
import {
    instanceOfMarkdown,
    MarkdownFromJSON,
    MarkdownFromJSONTyped,
    MarkdownToJSON,
} from './Markdown';
import type { NavigationButton } from './NavigationButton';
import {
    instanceOfNavigationButton,
    NavigationButtonFromJSON,
    NavigationButtonFromJSONTyped,
    NavigationButtonToJSON,
} from './NavigationButton';
import type { NavigationSection } from './NavigationSection';
import {
    instanceOfNavigationSection,
    NavigationSectionFromJSON,
    NavigationSectionFromJSONTyped,
    NavigationSectionToJSON,
} from './NavigationSection';
import type { Page } from './Page';
import {
    instanceOfPage,
    PageFromJSON,
    PageFromJSONTyped,
    PageToJSON,
} from './Page';
import type { PropertyCard } from './PropertyCard';
import {
    instanceOfPropertyCard,
    PropertyCardFromJSON,
    PropertyCardFromJSONTyped,
    PropertyCardToJSON,
} from './PropertyCard';
import type { SectionHeader } from './SectionHeader';
import {
    instanceOfSectionHeader,
    SectionHeaderFromJSON,
    SectionHeaderFromJSONTyped,
    SectionHeaderToJSON,
} from './SectionHeader';
import type { Sidebar } from './Sidebar';
import {
    instanceOfSidebar,
    SidebarFromJSON,
    SidebarFromJSONTyped,
    SidebarToJSON,
} from './Sidebar';
import type { Table } from './Table';
import {
    instanceOfTable,
    TableFromJSON,
    TableFromJSONTyped,
    TableToJSON,
} from './Table';

/**
 * @type Component
 * 
 * @export
 */
export type Component = { componentType: 'AmpiatoLogo' } & AmpiatoLogo | { componentType: 'Button' } & Button | { componentType: 'ButtonGroup' } & ButtonGroup | { componentType: 'DatePicker' } & DatePicker | { componentType: 'FlexBox' } & FlexBox | { componentType: 'Grid' } & Grid | { componentType: 'Icon' } & Icon | { componentType: 'Markdown' } & Markdown | { componentType: 'NavigationButton' } & NavigationButton | { componentType: 'NavigationSection' } & NavigationSection | { componentType: 'Page' } & Page | { componentType: 'PropertyCard' } & PropertyCard | { componentType: 'SectionHeader' } & SectionHeader | { componentType: 'Sidebar' } & Sidebar | { componentType: 'Table' } & Table;

export function ComponentFromJSON(json: any): Component {
    return ComponentFromJSONTyped(json, false);
}

export function ComponentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Component {
    if (json == null) {
        return json;
    }
    switch (json['component_type']) {
        case 'AmpiatoLogo':
            return Object.assign({}, AmpiatoLogoFromJSONTyped(json, true), { componentType: 'AmpiatoLogo' } as const);
        case 'Button':
            return Object.assign({}, ButtonFromJSONTyped(json, true), { componentType: 'Button' } as const);
        case 'ButtonGroup':
            return Object.assign({}, ButtonGroupFromJSONTyped(json, true), { componentType: 'ButtonGroup' } as const);
        case 'DatePicker':
            return Object.assign({}, DatePickerFromJSONTyped(json, true), { componentType: 'DatePicker' } as const);
        case 'FlexBox':
            return Object.assign({}, FlexBoxFromJSONTyped(json, true), { componentType: 'FlexBox' } as const);
        case 'Grid':
            return Object.assign({}, GridFromJSONTyped(json, true), { componentType: 'Grid' } as const);
        case 'Icon':
            return Object.assign({}, IconFromJSONTyped(json, true), { componentType: 'Icon' } as const);
        case 'Markdown':
            return Object.assign({}, MarkdownFromJSONTyped(json, true), { componentType: 'Markdown' } as const);
        case 'NavigationButton':
            return Object.assign({}, NavigationButtonFromJSONTyped(json, true), { componentType: 'NavigationButton' } as const);
        case 'NavigationSection':
            return Object.assign({}, NavigationSectionFromJSONTyped(json, true), { componentType: 'NavigationSection' } as const);
        case 'Page':
            return Object.assign({}, PageFromJSONTyped(json, true), { componentType: 'Page' } as const);
        case 'PropertyCard':
            return Object.assign({}, PropertyCardFromJSONTyped(json, true), { componentType: 'PropertyCard' } as const);
        case 'SectionHeader':
            return Object.assign({}, SectionHeaderFromJSONTyped(json, true), { componentType: 'SectionHeader' } as const);
        case 'Sidebar':
            return Object.assign({}, SidebarFromJSONTyped(json, true), { componentType: 'Sidebar' } as const);
        case 'Table':
            return Object.assign({}, TableFromJSONTyped(json, true), { componentType: 'Table' } as const);
        default:
            throw new Error(`No variant of Component exists with 'componentType=${json['componentType']}'`);
    }
}

export function ComponentToJSON(value?: Component | null): any {
    if (value == null) {
        return value;
    }
    switch (value['componentType']) {
        case 'AmpiatoLogo':
            return AmpiatoLogoToJSON(value);
        case 'Button':
            return ButtonToJSON(value);
        case 'ButtonGroup':
            return ButtonGroupToJSON(value);
        case 'DatePicker':
            return DatePickerToJSON(value);
        case 'FlexBox':
            return FlexBoxToJSON(value);
        case 'Grid':
            return GridToJSON(value);
        case 'Icon':
            return IconToJSON(value);
        case 'Markdown':
            return MarkdownToJSON(value);
        case 'NavigationButton':
            return NavigationButtonToJSON(value);
        case 'NavigationSection':
            return NavigationSectionToJSON(value);
        case 'Page':
            return PageToJSON(value);
        case 'PropertyCard':
            return PropertyCardToJSON(value);
        case 'SectionHeader':
            return SectionHeaderToJSON(value);
        case 'Sidebar':
            return SidebarToJSON(value);
        case 'Table':
            return TableToJSON(value);
        default:
            throw new Error(`No variant of Component exists with 'componentType=${value['componentType']}'`);
    }

}

