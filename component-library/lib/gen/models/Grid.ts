/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Component } from './Component';
import {
    ComponentFromJSON,
    ComponentFromJSONTyped,
    ComponentToJSON,
} from './Component';

/**
 * A Grid of components.
 * 
 * If you want to have an infinite number of items in a row or column, you can use the `FlexBox` component.
 * @export
 * @interface Grid
 */
export interface Grid {
    /**
     * 
     * @type {string}
     * @memberof Grid
     */
    componentType?: GridComponentTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Grid
     */
    cols: number;
    /**
     * 
     * @type {number}
     * @memberof Grid
     */
    gapX?: number;
    /**
     * 
     * @type {number}
     * @memberof Grid
     */
    gapY?: number;
    /**
     * 
     * @type {Array<Component>}
     * @memberof Grid
     */
    children: Array<Component>;
}


/**
 * @export
 */
export const GridComponentTypeEnum = {
    Grid: 'Grid'
} as const;
export type GridComponentTypeEnum = typeof GridComponentTypeEnum[keyof typeof GridComponentTypeEnum];


/**
 * Check if a given object implements the Grid interface.
 */
export function instanceOfGrid(value: object): value is Grid {
    if (!('cols' in value) || value['cols'] === undefined) return false;
    if (!('children' in value) || value['children'] === undefined) return false;
    return true;
}

export function GridFromJSON(json: any): Grid {
    return GridFromJSONTyped(json, false);
}

export function GridFromJSONTyped(json: any, ignoreDiscriminator: boolean): Grid {
    if (json == null) {
        return json;
    }
    return {
        
        'componentType': json['component_type'] == null ? undefined : json['component_type'],
        'cols': json['cols'],
        'gapX': json['gapX'] == null ? undefined : json['gapX'],
        'gapY': json['gapY'] == null ? undefined : json['gapY'],
        'children': ((json['children'] as Array<any>).map(ComponentFromJSON)),
    };
}

export function GridToJSON(value?: Grid | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'component_type': value['componentType'],
        'cols': value['cols'],
        'gapX': value['gapX'],
        'gapY': value['gapY'],
        'children': ((value['children'] as Array<any>).map(ComponentToJSON)),
    };
}

