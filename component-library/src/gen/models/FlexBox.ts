/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Component } from './Component';
import {
    ComponentFromJSON,
    ComponentFromJSONTyped,
    ComponentToJSON,
} from './Component';

/**
 * FlexBox is a stack of components in a specific direction.
 * 
 * If you want the flexbox to wrap after a certain number of items, you can use the `Grid` component.
 * @export
 * @interface FlexBox
 */
export interface FlexBox {
    /**
     * 
     * @type {string}
     * @memberof FlexBox
     */
    componentType?: FlexBoxComponentTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof FlexBox
     */
    gap?: number;
    /**
     * 
     * @type {string}
     * @memberof FlexBox
     */
    dir: FlexBoxDirEnum;
    /**
     * 
     * @type {Array<Component>}
     * @memberof FlexBox
     */
    children: Array<Component>;
}


/**
 * @export
 */
export const FlexBoxComponentTypeEnum = {
    FlexBox: 'FlexBox'
} as const;
export type FlexBoxComponentTypeEnum = typeof FlexBoxComponentTypeEnum[keyof typeof FlexBoxComponentTypeEnum];

/**
 * @export
 */
export const FlexBoxDirEnum = {
    Horizontal: 'horizontal',
    Vertical: 'vertical'
} as const;
export type FlexBoxDirEnum = typeof FlexBoxDirEnum[keyof typeof FlexBoxDirEnum];


/**
 * Check if a given object implements the FlexBox interface.
 */
export function instanceOfFlexBox(value: object): value is FlexBox {
    if (!('dir' in value) || value['dir'] === undefined) return false;
    if (!('children' in value) || value['children'] === undefined) return false;
    return true;
}

export function FlexBoxFromJSON(json: any): FlexBox {
    return FlexBoxFromJSONTyped(json, false);
}

export function FlexBoxFromJSONTyped(json: any, ignoreDiscriminator: boolean): FlexBox {
    if (json == null) {
        return json;
    }
    return {
        
        'componentType': json['component_type'] == null ? undefined : json['component_type'],
        'gap': json['gap'] == null ? undefined : json['gap'],
        'dir': json['dir'],
        'children': ((json['children'] as Array<any>).map(ComponentFromJSON)),
    };
}

export function FlexBoxToJSON(value?: FlexBox | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'component_type': value['componentType'],
        'gap': value['gap'],
        'dir': value['dir'],
        'children': ((value['children'] as Array<any>).map(ComponentToJSON)),
    };
}

